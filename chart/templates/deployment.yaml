{{ $Values := .Values }}
{{ $Chart := .Chart }}
{{ $Release := .Release }}
apiVersion: apps/v1

# Create a StatefulSet for the db to run on Azure
kind: StatefulSet
metadata:
  name: database
  namespace: {{ .Release.Namespace }}
  labels:
    app: database
spec:
  serviceName: database
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
        - name: mongodb
          image: mongo:6.0.19
          ports:
            - containerPort: 27017
      {{ if not .Values.dev_mode }}
          volumeMounts:
            - name: database-storage
              mountPath: /data/db
      volumes:
        - name: database-storage
          persistentVolumeClaim:
            claimName: database-storage
      {{ end }}

---
apiVersion: apps/v1

# Create a deployment for the messaging queue
kind: Deployment
metadata:
  name: messaging-queue
  namespace: {{ .Release.Namespace }}
  labels:
    app: messaging-queue
spec:
  selector:
    matchLabels:
      app: messaging-queue
  template:
    metadata:
      labels:
        app: messaging-queue
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management
          ports:
            - containerPort: 15672
            - containerPort: 5672

{{ range $name, $service := .Values.msa }}
---
apiVersion: apps/v1

# Create a deployment for each service: {{ $name | kebabcase }} now
{{ if $Values.dev_mode }}
kind: Deployment
{{ else }}
{{ if $service }}
{{ if $service.storage }}
kind: StatefulSet
{{ else }}
kind: Deployment
{{ end }}
{{ else }}
kind: Deployment
{{ end }}
{{ end }}
metadata:
  name: {{ $name | kebabcase }}
  namespace: {{ $Release.Namespace }}
  labels:
    app: {{ $name | kebabcase }}
spec:
  {{ if not $Values.dev_mode }}
  {{ if $service }}
  {{ if $service.storage }}
  serviceName: {{ $name | kebabcase }}
  {{ end }}
  {{ end }}
  {{ end }}
  selector:
    matchLabels:
      app: {{ $name | kebabcase }}
  template:
    metadata:
      labels:
        app: {{ $name | kebabcase }}
        {{ if not $Values.dev_mode }}
        aadpodidbinding: thesisfair-azure-kv
        {{ end }}
    spec:
      containers:
        - name: {{ $name | kebabcase }}
          # In production mode, use secrets from Azure
          {{ if not $Values.dev_mode }}
          {{ if $service }}
          {{ if $service.secrets  }}
          envFrom:
            - secretRef:
                name: {{ $name | kebabcase }}
          {{ end }}
          {{ end }}
          {{ end }}
          {{ if eq $name "frontend_service" }}
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 90
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 90
            periodSeconds: 10
          {{ end }}
          env:
            - name: mongodbConStr
              value: "mongodb://database/{{ $name }}"
            - name: amqpConStr
              value: "amqp://messaging-queue"
            - name: BUILD_VERSION
              value: "{{ $Chart.AppVersion }}"
            # Get global common env variables from the root-level 'env' field
            {{ if $Values.env }}
            {{ range $key, $value := $Values.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{ end }}
            {{ end }}
            # If dev mode is enabled, take secrets directly from values
            {{ if $Values.dev_mode }}
            {{ if $service }}
            {{ range $service.secrets }}
            - name: {{ .key }}
              value: "{{ index $Values.dev.secrets .key }}"
            {{ end }}
            {{ end }}
            {{ end }}
            # Get environment variables set explicitly per microservice
            {{ if $service }}
            {{ range $key, $value := $service.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{ end }}
            {{ end }}
          image: {{ $Values.dev_mode | ternary $Values.dev.cr $Values.prod.cr }}/{{ $name | lower }}
          imagePullPolicy: {{ $Values.dev_mode | ternary $Values.dev.pullPolicy $Values.prod.pullPolicy }}
          command: [
            NODE_ENV=production,
            npm,
            run,
            {{ $Values.dev_mode | ternary "start" "production"}},
          ]
          # In dev mode, mount libraries and source folders
          volumeMounts:
          {{ if $Values.dev_mode }}
            - mountPath: /libraries
              name: libraries
            - mountPath: /app/src
              name: code
          {{ else }}
            - mountPath: /etc/secrets
              name: secrets
          {{ end }}
          {{ if $service }}
          {{ if $service.storage }}
            - mountPath: /app/data
              name: {{ $name | kebabcase }}-data-storage
          {{ end }}
          {{ end }}

      volumes:
      {{ if $Values.dev_mode }}
        - name: libraries
          persistentVolumeClaim:
            claimName: libraries
        - name: code
          persistentVolumeClaim:
            claimName: {{ $name | kebabcase }}
      {{ else }}
        - name: secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: thesisfair-secrets
      {{ end }}
      {{ if $service }}
      {{ if $service.storage }}
        - name: {{ $name | kebabcase }}-data-storage
          persistentVolumeClaim:
            claimName: {{ $name | kebabcase }}-data-storage
      {{ end }}
      {{ end }}
{{ end }}
