{{ $Values := .Values }}
{{ if .Values.dev_mode }}
apiVersion: apps/v1

# Create a deployment for the database in dev mode
kind: Deployment
metadata:
  name: database
  labels:
    app: database
spec:
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
        - name: mongodb
          image: mongo
          ports:
            - containerPort: 27017
{{ else }}
apiVersion: apps/v1

# Create a StatefulSet for the db to run on Azure
kind: StatefulSet
metadata:
  name: database
  labels:
    app: database
spec:
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
        - name: mongodb
          image: mongo
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: database-storage
              mountPath: /data/db
      volumes:
        - name: database-storage
          persistentVolumeClaim:
            claimName: database-storage
{{ end }}

---
apiVersion: apps/v1

# Create a deployment for the messaging queue
kind: Deployment
metadata:
  name: messaging-queue
  labels:
    app: messaging-queue
spec:
  selector:
    matchLabels:
      app: messaging-queue
  template:
    metadata:
      labels:
        app: messaging-queue
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management
          ports:
            - containerPort: 15672
            - containerPort: 5672

{{ range $name, $service := .Values.msa }}
---
apiVersion: apps/v1

# Create a deployment for each service: {{ $name | kebabcase }} now
kind: Deployment
metadata:
  name: {{ $name | kebabcase }}
  labels:
    app: {{ $name | kebabcase }}
spec:
  selector:
    matchLabels:
      app: {{ $name | kebabcase }}
  template:
    metadata:
      labels:
        app: {{ $name | kebabcase }}
    spec:
      containers:
        - name: {{ $name | kebabcase }}
          env:
            - name: mongodbConStr
              value: "mongodb://database/{{ $name }}"
            - name: amqpConStr
              value: "amqp://messaging-queue"
            {{ if $service }}
            {{ range $key, $value := $service.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{ end }}
            {{ end }}
          image: {{ $Values.dev_mode | ternary $Values.dev.cr $Values.prod.cr }}/{{ $name | lower }}
          imagePullPolicy: {{ $Values.dev_mode | ternary $Values.dev.pullPolicy $Values.prod.pullPolicy }}
          command: [
            npm,
            run,
            {{ $Values.dev_mode | ternary "start" "production"}},
          ]
          # In dev mode, mount libraries and source folders
          {{ if $Values.dev_mode }}
          volumeMounts:
            - mountPath: /libraries
              name: libraries
            - mountPath: /app/src
              name: {{ $name | kebabcase }}
          {{ end }}

      {{ if $Values.dev_mode }}
      volumes:
        - name: libraries
          persistentVolumeClaim:
            claimName: libraries
        - name: {{ $name | kebabcase }}
          persistentVolumeClaim:
            claimName: {{ $name | kebabcase }}
      {{ end }}
{{ end }}
