{{ $Values := .Values }}
{{ if .Values.dev_mode }}
apiVersion: "storage.k8s.io/v1"

# Define a storage class for this dev mode mounting
kind: StorageClass
metadata:
  name: thesisfair-dev-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

---
apiVersion: v1

# Mount the shared libraries
kind: PersistentVolume
metadata:
  name: libraries
spec:
  storageClassName: thesisfair-dev-storage
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  local:
    path: {{ $Values.dev.repository }}/msa/libraries
  capacity:
    storage: 20Mi
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: "kubernetes.io/hostname"
              operator: In
              values:
                - minikube
---
apiVersion: v1

# Make a claim to the shared libraries that will be shared by the services
kind: PersistentVolumeClaim
metadata:
  name: libraries
spec:
  storageClassName: thesisfair-dev-storage
  accessModes:
    - ReadWriteOnce
  volumeName: libraries
  resources:
    requests:
      storage: 20Mi

{{ range $name, $service := .Values.msa }}
---
apiVersion: v1

# Mount code for each service: {{ $name | kebabcase }} now
kind: PersistentVolume
metadata:
  name: {{ $name | kebabcase }}
spec:
  storageClassName: thesisfair-dev-storage
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  local:
    path: {{ $Values.dev.repository }}/msa/{{ $name }}/src
  capacity:
    storage: 20Mi
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: "kubernetes.io/hostname"
              operator: In
              values:
                - minikube
---
apiVersion: v1

# Mount shared libraries for each service: {{ $name | kebabcase }} now
kind: PersistentVolumeClaim
metadata:
  name: {{ $name | kebabcase }}
spec:
  storageClassName: thesisfair-dev-storage
  accessModes:
    - ReadWriteOnce
  volumeName: {{ $name | kebabcase }}
  resources:
    requests:
      storage: 20Mi
{{ end }}
{{ end }}
